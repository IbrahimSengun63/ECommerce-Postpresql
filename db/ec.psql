-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS customer.address
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    customer_id integer,
    province_id integer,
    adddress text COLLATE pg_catalog."default",
    phone_no character varying(255) COLLATE pg_catalog."default",
    c_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    m_at timestamp without time zone,
    d_at timestamp without time zone,
    CONSTRAINT address_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS customer.customer
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    firstname character varying(255) COLLATE pg_catalog."default",
    lastname character varying(255) COLLATE pg_catalog."default",
    username character varying(255) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default",
    c_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    m_at timestamp without time zone,
    d_at timestamp without time zone,
    CONSTRAINT customer_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS customer.login
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    customer_id integer,
    password_id integer,
    active boolean,
    e_at timestamp without time zone,
    CONSTRAINT login_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS customer.login_history
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    login_id integer,
    ip_address character varying(255) COLLATE pg_catalog."default",
    status character varying(255) COLLATE pg_catalog."default",
    active boolean,
    c_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    e_at timestamp without time zone,
    CONSTRAINT login_history_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS customer.password
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    customer_id integer,
    hash character varying(255) COLLATE pg_catalog."default",
    active boolean,
    c_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    e_at timestamp without time zone,
    CONSTRAINT password_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS customer.payment_info
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    customer_id integer,
    credit_card_no character varying(255) COLLATE pg_catalog."default",
    ccv_no character varying(255) COLLATE pg_catalog."default",
    date character varying(255) COLLATE pg_catalog."default",
    c_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    m_at timestamp without time zone,
    d_at timestamp without time zone,
    CONSTRAINT payment_info_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS product.categories
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(255) COLLATE pg_catalog."default",
    "desc" character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT categories_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS product.discount
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    product_id integer,
    percent integer,
    active boolean,
    c_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    e_at timestamp without time zone,
    CONSTRAINT discount_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS product.images
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    product_options integer,
    source character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT images_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS product.inventory
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    product_id integer,
    stock integer,
    CONSTRAINT inventory_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS product.options
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    product_id integer,
    "desc" character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT options_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS product.price
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    product_id integer,
    original_price integer,
    discount_price integer,
    active boolean,
    c_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    e_at timestamp without time zone,
    CONSTRAINT price_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS product.price_history
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    price_id integer,
    c_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    e_at timestamp without time zone,
    CONSTRAINT price_history_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS product.product
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(255) COLLATE pg_catalog."default",
    sku character varying(255) COLLATE pg_catalog."default",
    category_id integer,
    c_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    m_at timestamp without time zone,
    d_at timestamp without time zone,
    CONSTRAINT product_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS product.vendor
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    store_id integer,
    inventory_id integer,
    CONSTRAINT vendor_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS public.cities
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT cities_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS public.districts
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    city_id integer,
    CONSTRAINT districts_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS public.neighbourhoods
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    district_id integer,
    name character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT neighbourhoods_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS public.status
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    status character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT status_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS store.address
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    store_id integer,
    province_id integer,
    adddress text COLLATE pg_catalog."default",
    phone_no character varying(255) COLLATE pg_catalog."default",
    c_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    m_at timestamp without time zone,
    d_at timestamp without time zone,
    CONSTRAINT address_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS store.login
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    store_id integer,
    password_id integer,
    active boolean,
    e_at timestamp without time zone,
    CONSTRAINT login_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS store.login_history
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    login_id integer,
    ip_address character varying(255) COLLATE pg_catalog."default",
    status character varying(255) COLLATE pg_catalog."default",
    active boolean,
    c_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    e_at timestamp without time zone,
    CONSTRAINT login_history_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS store.password
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    store_id integer,
    hash character varying(255) COLLATE pg_catalog."default",
    active boolean,
    c_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    e_at timestamp without time zone,
    CONSTRAINT password_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS store.payment_info
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    store_id integer,
    credit_card_no character varying(255) COLLATE pg_catalog."default",
    ccv_no character varying(255) COLLATE pg_catalog."default",
    date character varying(255) COLLATE pg_catalog."default",
    c_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    m_at timestamp without time zone,
    d_at timestamp without time zone,
    CONSTRAINT payment_info_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS store.shipment
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    sold_id integer,
    address_id integer,
    CONSTRAINT shipment_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS store.sold
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    store_id integer,
    order_code character varying(255) COLLATE pg_catalog."default",
    product_id integer,
    quantity integer,
    c_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    m_at timestamp without time zone,
    d_at timestamp without time zone,
    CONSTRAINT sold_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS store.store
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(255) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default",
    c_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    m_at timestamp without time zone,
    d_at timestamp without time zone,
    CONSTRAINT store_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS store.transaction
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    sold_id integer,
    payment_id integer,
    total integer,
    CONSTRAINT transaction_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS trade.card
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    customer_id integer,
    total integer,
    CONSTRAINT card_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS trade.card_items
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    card_id integer,
    product_id integer,
    quantity integer,
    CONSTRAINT card_items_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS trade."order"
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    card_id integer,
    status_id integer,
    code character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT order_pkey PRIMARY KEY (id),
    CONSTRAINT order_code_key UNIQUE (code)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS trade.shipment
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    order_id integer,
    address_id integer,
    shipment_id integer,
    status_id integer,
    CONSTRAINT shipment_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS trade.transaction
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    order_id integer,
    payment_id integer,
    status_id integer,
    CONSTRAINT transaction_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
);

ALTER TABLE IF EXISTS customer.address
    ADD CONSTRAINT address_customer_id_fkey FOREIGN KEY (customer_id)
    REFERENCES customer.customer (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS customer.address
    ADD CONSTRAINT address_province_id_fkey FOREIGN KEY (province_id)
    REFERENCES public.neighbourhoods (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS customer.login
    ADD CONSTRAINT login_customer_id_fkey FOREIGN KEY (customer_id)
    REFERENCES customer.customer (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS customer.login
    ADD CONSTRAINT login_password_id_fkey FOREIGN KEY (password_id)
    REFERENCES customer.password (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS customer.login_history
    ADD CONSTRAINT login_history_login_id_fkey FOREIGN KEY (login_id)
    REFERENCES customer.login (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS customer.password
    ADD CONSTRAINT password_customer_id_fkey FOREIGN KEY (customer_id)
    REFERENCES customer.customer (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS customer.payment_info
    ADD CONSTRAINT payment_info_customer_id_fkey FOREIGN KEY (customer_id)
    REFERENCES customer.customer (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS product.discount
    ADD CONSTRAINT discount_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES product.product (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS product.images
    ADD CONSTRAINT images_product_options_fkey FOREIGN KEY (product_options)
    REFERENCES product.options (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS product.inventory
    ADD CONSTRAINT inventory_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES product.product (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS product.options
    ADD CONSTRAINT options_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES product.product (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS product.price
    ADD CONSTRAINT price_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES product.product (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS product.price_history
    ADD CONSTRAINT price_history_price_id_fkey FOREIGN KEY (price_id)
    REFERENCES product.price (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS product.product
    ADD CONSTRAINT product_category_id_fkey FOREIGN KEY (category_id)
    REFERENCES product.categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS product.vendor
    ADD CONSTRAINT vendor_inventory_id_fkey FOREIGN KEY (inventory_id)
    REFERENCES product.inventory (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS product.vendor
    ADD CONSTRAINT vendor_store_id_fkey FOREIGN KEY (store_id)
    REFERENCES store.store (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.districts
    ADD CONSTRAINT districts_city_id_fkey FOREIGN KEY (city_id)
    REFERENCES public.cities (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.neighbourhoods
    ADD CONSTRAINT neighbourhoods_district_id_fkey FOREIGN KEY (district_id)
    REFERENCES public.districts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.address
    ADD CONSTRAINT address_province_id_fkey FOREIGN KEY (province_id)
    REFERENCES public.neighbourhoods (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS store.address
    ADD CONSTRAINT address_store_id_fkey FOREIGN KEY (store_id)
    REFERENCES store.store (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS store.login
    ADD CONSTRAINT login_password_id_fkey FOREIGN KEY (password_id)
    REFERENCES store.password (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS store.login
    ADD CONSTRAINT login_store_id_fkey FOREIGN KEY (store_id)
    REFERENCES store.store (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS store.login_history
    ADD CONSTRAINT login_history_login_id_fkey FOREIGN KEY (login_id)
    REFERENCES store.login (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS store.password
    ADD CONSTRAINT password_store_id_fkey FOREIGN KEY (store_id)
    REFERENCES store.store (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS store.payment_info
    ADD CONSTRAINT payment_info_store_id_fkey FOREIGN KEY (store_id)
    REFERENCES store.store (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS store.shipment
    ADD CONSTRAINT shipment_address_id_fkey FOREIGN KEY (address_id)
    REFERENCES store.address (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS store.shipment
    ADD CONSTRAINT shipment_sold_id_fkey FOREIGN KEY (sold_id)
    REFERENCES store.sold (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS store.sold
    ADD CONSTRAINT sold_order_code_fkey FOREIGN KEY (order_code)
    REFERENCES trade."order" (code) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS store.sold
    ADD CONSTRAINT sold_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES product.product (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS store.sold
    ADD CONSTRAINT sold_store_id_fkey FOREIGN KEY (store_id)
    REFERENCES store.store (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS store.transaction
    ADD CONSTRAINT transaction_payment_id_fkey FOREIGN KEY (payment_id)
    REFERENCES store.payment_info (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS store.transaction
    ADD CONSTRAINT transaction_sold_id_fkey FOREIGN KEY (sold_id)
    REFERENCES store.sold (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS trade.card
    ADD CONSTRAINT card_customer_id_fkey FOREIGN KEY (customer_id)
    REFERENCES customer.customer (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS trade.card_items
    ADD CONSTRAINT card_items_card_id_fkey FOREIGN KEY (card_id)
    REFERENCES trade.card (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS trade.card_items
    ADD CONSTRAINT card_items_product_id_fkey FOREIGN KEY (product_id)
    REFERENCES product.product (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS trade."order"
    ADD CONSTRAINT order_card_id_fkey FOREIGN KEY (card_id)
    REFERENCES trade.card (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS trade."order"
    ADD CONSTRAINT order_status_id_fkey FOREIGN KEY (status_id)
    REFERENCES public.status (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS trade.shipment
    ADD CONSTRAINT shipment_address_id_fkey FOREIGN KEY (address_id)
    REFERENCES customer.address (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS trade.shipment
    ADD CONSTRAINT shipment_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES trade."order" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS trade.shipment
    ADD CONSTRAINT shipment_shipment_id_fkey FOREIGN KEY (shipment_id)
    REFERENCES store.shipment (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS trade.shipment
    ADD CONSTRAINT shipment_status_id_fkey FOREIGN KEY (status_id)
    REFERENCES public.status (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS trade.transaction
    ADD CONSTRAINT transaction_order_id_fkey FOREIGN KEY (order_id)
    REFERENCES trade."order" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS trade.transaction
    ADD CONSTRAINT transaction_payment_id_fkey FOREIGN KEY (payment_id)
    REFERENCES customer.payment_info (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS trade.transaction
    ADD CONSTRAINT transaction_status_id_fkey FOREIGN KEY (status_id)
    REFERENCES public.status (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;